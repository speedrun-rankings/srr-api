/*
 * This file is generated by jOOQ.
 */
package io.github.sornerol.speedrunrankingsapi.data.generated.srrdb.tables;


import io.github.sornerol.speedrunrankingsapi.data.generated.srrdb.Keys;
import io.github.sornerol.speedrunrankingsapi.data.generated.srrdb.Srrdb;
import io.github.sornerol.speedrunrankingsapi.data.generated.srrdb.tables.records.PlatformRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Platform extends TableImpl<PlatformRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>srrdb.platform</code>
     */
    public static final Platform PLATFORM = new Platform();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlatformRecord> getRecordType() {
        return PlatformRecord.class;
    }

    /**
     * The column <code>srrdb.platform.id</code>.
     */
    public final TableField<PlatformRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>srrdb.platform.name</code>.
     */
    public final TableField<PlatformRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Platform(Name alias, Table<PlatformRecord> aliased) {
        this(alias, aliased, null);
    }

    private Platform(Name alias, Table<PlatformRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>srrdb.platform</code> table reference
     */
    public Platform(String alias) {
        this(DSL.name(alias), PLATFORM);
    }

    /**
     * Create an aliased <code>srrdb.platform</code> table reference
     */
    public Platform(Name alias) {
        this(alias, PLATFORM);
    }

    /**
     * Create a <code>srrdb.platform</code> table reference
     */
    public Platform() {
        this(DSL.name("platform"), null);
    }

    public <O extends Record> Platform(Table<O> child, ForeignKey<O, PlatformRecord> key) {
        super(child, key, PLATFORM);
    }

    @Override
    public Schema getSchema() {
        return Srrdb.SRRDB;
    }

    @Override
    public Identity<PlatformRecord, Integer> getIdentity() {
        return (Identity<PlatformRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlatformRecord> getPrimaryKey() {
        return Keys.KEY_PLATFORM_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlatformRecord>> getKeys() {
        return Arrays.<UniqueKey<PlatformRecord>>asList(Keys.KEY_PLATFORM_PRIMARY);
    }

    @Override
    public Platform as(String alias) {
        return new Platform(DSL.name(alias), this);
    }

    @Override
    public Platform as(Name alias) {
        return new Platform(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Platform rename(String name) {
        return new Platform(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Platform rename(Name name) {
        return new Platform(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
